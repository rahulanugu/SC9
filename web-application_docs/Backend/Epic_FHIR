EPIC Interface & FHIR API Documentation

Introduction
Epic is a strong supporter of the HL7® FHIR® standard as the future of REST-based interoperability. 
Epic's work with FHIR means that any health system, hospital, or clinic that uses Epic's comprehensive health record system can connect to any app that also supports FHIR to exchange health information.
We are going to retrieve the patient’s healthcare data from this EPIC RESTful API and integrate an Epic Interface on our Django backend to support our frontend. All the code should under the Django-REST-API/api/predictor/EHRInterface/, we are now using EpicInterface.py to send http request and FHIRParser.py to parse the response.
Epic website: https://fhir.epic.com/ to login and have a look at documentation, please ask moh for authorization.
 
How to generate new public keys - https://fhir.epic.com/Documentation?docId=oauth2&section=Creating-Key-Pair 
Epic App setup

The first step to create an App is to set the Application Name as your wish, Application Audience to Backend Systems and select the API that we need for future use.
 

Then we need to deal with the testing configuration (still on this stage for now). Upload the public key(509 certification) and generate JWK Set URL. 
(How to generate key pairs: https://fhir.epic.com/Documentation?docId=oauth2&section=Creating-Key-Pair
How to set JWK:
https://fhir.epic.com/Documentation?docId=oauth2&section=JWKS-URLS
)
 
Oauth 2.0 Authentication

We are using a smart backend service to retrieve the access token. The documentation is https://fhir.epic.com/Documentation?docId=oauth2&section=BackendOAuth2Guide
To get the access token we need to generate a JWT 
And then we can fetch the access token(will expired in 3600 seconds)

Using this access token as Bearer Token we will be able to access the EPIC API.
 
Retrieve and parse the FHIR data


To make our frontend work, we need to retrieve the data and parse them to the given struct.(result variable below) The data struct is hardcoded for now:

 
Firstly, you need to develop a function to send the http request with the correct format to EPIC endpoints and map a key with this function:

 
Then you need to generate access token for authentication:

Config the pairs with key name (key func mapping) and required params. We will retrieve the data with xml format and we can parse it using xmltodict. Then we will be able to fill the data we need for frontend display:


 
 
 
 
 
Data to be parsed
 
FHIR data we need to parse （FHIRParser.py）:
 
patientDetails:  details about a given patient
——name: name of this patient	✅
——sex: sex of this patient 		✅
——age: calculated by dob 		✅
——height: height of this patient	✅
——weight: weight of this patient	✅
——bmi: calculated by height and weight	✅
——id: patient id			✅
——mrn: mrn of this patient	✅
——dob: date of birth		✅
——next_appt: information about next appointment ✅
————date: the date of appointment		     ✅
————time: the time of appointment 	 	     ✅
 
——readmissionRisks: an array of readmission risks
————name: name of readmission risk
————symptoms: symptoms
————value: value of readmission risk
——allergies: an array of allergies ✅
————name: the name of allergy ✅
——lifestyle: the lifestyle of patient ✅
————smokes: whether this patient smokes ✅
——prescribedMedications: an array of prescribed medications ✅
————name: name of the medication				✅
————dosage: the dosage of the medication 			✅
————date_prescribed: the date of prescribed medication	✅
 
readimissionRisk: not sure where to get this data, perhaps from ml model
symptomsComplaints: an array of complaints about the symptoms ✅
——name: name of symptom ✅
——date: date of complaint ✅
——details: details description ✅
diagnosedConditions: an array of  diagnosed conditions ✅
——name: name of condition ✅
——date: date of diagnose ✅
——details: details description ✅
 
conditionRisks: the risk of getting a condition 
 
——name: name of condition
——value: this value will generated by the ai model backend, please have a look on Django backend, 
——link: should be generated in frontend, todo
——show: frontend configuration
——diagnosed: checked from diagnosed condition
 
recommendedMedications: recommendation of medications for this patient
——not_prescribed: array of not prescribed medications
———— class:the class of medication
———— meds:the specific medication
——allergic: array of allergic medications	✅
———— class:the class of medication	✅
———— meds:the specific medication	✅
 
abnormalLabs: array of abnormal labs  (some of the referenceRange are not provided, leave the status empty for them, still need further work)
——test: test name 				✅
——result: test result			✅
 ——status: low/medium/high		✅
 
priorProcedures: array of prior procedures	✅
——name: name of procedure, 			✅
——date: date of procedure, 			✅
——details: details description			✅
 
admissionHistory: ✅
——discharge: date of discharge ✅
——date: date of admission ✅
——details: details description ✅
 
vitalData:  data for vital graph generate	✅
——weight: 					✅
————dates: list of dates			✅
————weights: list of data		✅
——height: 					✅
————dates: list of dates			✅
————heights: list of data			✅
—— blood pressure mm[Hg]		✅ 
 
 
 
 
 
 
Things to be done:
 
 
 
Backend:
get_epic_data() function needs to parse more API data as specified on EPIC FHIR Endpoints google sheet (Updated EPIC Mayo Clinic)
Some abnormal labs don't have a reference range, so left as "unknown (noReferenceRange given)" and included in abnormal labs, may need to be changed.
Enpty fields such as condition and readmission risk are provided with the ML code, not the FHIR API, so need to get that data (maybe in views.py)

Need parse() function called with patient ID from Django backend (views.py)
Add more endpoints for get_epic_data() function as defined on EPIC endpoints google sheet
Make the url a parameter for the parse() and get_epic_data() functions - currently urls are hardcoded in pairs
Make the functions error proof - if an error is returned from the API, the functions still try to parse - make it so this does not happen and an error is thrown and handled
Communicate with AI team to deploy and make use of new AI model
Parse with other data instead of just using sandbox testing data (use new patient IDs)
CORS ISSUE: https://www.stackhawk.com/blog/django-cors-guide/
 
Frontend:
Keyword extractor and share button are disabled due to the environment configuration for blog pages. Please further implement that
Careers page CSS style adjustment
Connect Provider portal to Django backend, some data type need further adjustment to show on the page
The data feed to the AI backend is hardcoded now in frontend. Also needs to be parsed from the FHIR API. The structure is the same as the hardcoded data.
 
 
